{"version":3,"sources":["components/Feedback/FeedbackOptions/FeedbackOptions.js","components/Feedback/Statistics/Statistics.js","App.js","reportWebVitals.js","index.js"],"names":["FeedbackOptions","options","onLeaveFeedback","className","Object","keys","map","el","onClick","Statistics","good","bad","neutral","total","positivePercentage","App","state","increment","setState","prevState","this","Math","round","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qRAoBeA,EAjBS,SAAC,GAAgC,IAA/BC,EAA8B,EAA9BA,QAASC,EAAqB,EAArBA,gBAClC,OACC,qBAAKC,UAAU,YAAf,SACEC,OAAOC,KAAKJ,GAASK,KAAI,SAAAC,GAAE,OAC3B,wBAAiBJ,UAAU,SAASK,QAAS,kBAAMN,EAAgBK,IAAnE,SACEA,GADWA,SCgBFE,EApBI,SAAC,GAAuD,IAArDC,EAAoD,EAApDA,KAAMC,EAA8C,EAA9CA,IAAKC,EAAyC,EAAzCA,QAASC,EAAgC,EAAhCA,MAAOC,EAAyB,EAAzBA,mBAChD,OACC,sBAAKX,UAAU,aAAf,UACC,uCAAUO,KACV,0CAAaE,KACb,sCAASD,KACT,wCAAWE,KACX,oDAAuBC,EAAvB,WCsCYC,E,4MAvCdC,MAAQ,CACPN,KAAM,EACNE,QAAS,EACTD,IAAK,G,EAENM,UAAY,SAAAV,GACX,EAAKW,UAAS,SAAAC,GACb,OAAO,eACLZ,EAAKY,EAAUZ,GAAM,O,4CAIzB,WACC,MAA+Ba,KAAKJ,MAA5BN,EAAR,EAAQA,KAAME,EAAd,EAAcA,QAASD,EAAvB,EAAuBA,IACnBE,EAAQH,EAAOE,EAAUD,EAC7B,OACC,sBAAKR,UAAU,MAAf,UACC,oBAAIA,UAAU,SAAd,mCACA,cAAC,EAAD,CACCF,QAASmB,KAAKJ,MACdd,gBAAiBkB,KAAKH,YAEvB,oBAAId,UAAU,SAAd,wBACW,IAAVU,EACA,sBAAMV,UAAU,aAAhB,+BAEA,cAAC,EAAD,CACCO,KAAMA,EACNC,IAAKA,EACLC,QAASA,EACTC,MAAOA,EACPC,mBAAoBO,KAAKC,MAAOZ,EAAQG,EAAU,c,GAhCtCU,aCIHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.63337bdc.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst FeedbackOptions = ({options, onLeaveFeedback}) => {\r\n\treturn (\r\n\t\t<div className=\"buttonset\">\r\n\t\t\t{Object.keys(options).map(el => (\r\n\t\t\t\t<button key={el} className=\"button\" onClick={() => onLeaveFeedback(el)}>\r\n\t\t\t\t\t{el}\r\n\t\t\t\t</button>\r\n\t\t\t))}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nFeedbackOptions.propTypes = {\r\n\toptions: PropTypes.object.isRequired,\r\n\tonLeaveFeedback: PropTypes.func.isRequired\r\n}\r\n\r\nexport default FeedbackOptions;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Statistics = ({ good, bad, neutral, total, positivePercentage }) => {\r\n\treturn (\r\n\t\t<div className=\"statistics\">\r\n\t\t\t<p>Good: {good}</p>\r\n\t\t\t<p>Neutral: {neutral}</p>\r\n\t\t\t<p>Bad: {bad}</p>\r\n\t\t\t<p>Total: {total}</p>\r\n\t\t\t<p>Positive feedback: {positivePercentage}%</p>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nStatistics.propTypes = {\r\n\tgood: PropTypes.number.isRequired,\r\n\tbad: PropTypes.number.isRequired,\r\n\tneutral: PropTypes.number.isRequired,\r\n\ttotal: PropTypes.number.isRequired,\r\n\tpositivePercentage: PropTypes.number.isRequired\r\n}\r\n\r\nexport default Statistics;\r\n","import 'modern-normalize/modern-normalize.css';\nimport './components/Feedback/Feedback.scss';\nimport './App.css';\n// import Feedback from './components/Feedback';\nimport FeedbackOptions from './components/Feedback/FeedbackOptions';\nimport Statistics from './components/Feedback/Statistics';\nimport React, { Component } from 'react';\n\nclass App extends Component {\n\tstate = {\n\t\tgood: 0,\n\t\tneutral: 0,\n\t\tbad: 0,\n\t};\n\tincrement = el => {\n\t\tthis.setState(prevState => {\n\t\t\treturn {\n\t\t\t\t[el]: prevState[el] + 1,\n\t\t\t};\n\t\t});\n\t};\n\trender() {\n\t\tconst { good, neutral, bad } = this.state;\n\t\tlet total = good + neutral + bad;\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h2 className=\"header\">Please leave feedback</h2>\n\t\t\t\t<FeedbackOptions\n\t\t\t\t\toptions={this.state}\n\t\t\t\t\tonLeaveFeedback={this.increment}\n\t\t\t\t/>\n\t\t\t\t<h2 className=\"header\">Statistics</h2>\n\t\t\t\t{total === 0 ? (\n\t\t\t\t\t<span className=\"nofeedback\">No feedback given</span>\n\t\t\t\t) : (\n\t\t\t\t\t<Statistics\n\t\t\t\t\t\tgood={good}\n\t\t\t\t\t\tbad={bad}\n\t\t\t\t\t\tneutral={neutral}\n\t\t\t\t\t\ttotal={total}\n\t\t\t\t\t\tpositivePercentage={Math.round((good / (total)) * 100)}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}